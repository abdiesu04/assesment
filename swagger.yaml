openapi: 3.0.0
info:
  title: Books API
  description: A RESTful API for managing books with authentication, search, and reviews
  version: 1.0.0
  contact:
    email: your.email@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000/api
    description: Development server
  - url: https://your-production-url.com/api
    description: Production server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          description: User ID
        username:
          type: string
          description: User's username
        email:
          type: string
          format: email
          description: User's email
        password:
          type: string
          format: password
          description: User's password (not returned in responses)
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - username
        - email
        - password

    Book:
      type: object
      properties:
        _id:
          type: string
          description: Book ID
        title:
          type: string
          description: Book title
        author:
          type: string
          description: Book author
        publishedDate:
          type: string
          format: date
          description: Publication date
        numberOfPages:
          type: integer
          minimum: 1
          description: Number of pages
        isbn:
          type: string
          description: ISBN number
        genres:
          type: array
          items:
            type: string
            enum: [Fiction, Non-Fiction, Science Fiction, Fantasy, Mystery, Thriller, Romance, Biography, History, Science, Technology, Self-Help, Other]
        description:
          type: string
          description: Book description
        price:
          type: number
          format: float
          minimum: 0
          description: Book price
        language:
          type: string
          default: English
          description: Book language
        publisher:
          type: string
          description: Publisher name
        coverImage:
          type: string
          description: URL to book cover image
        rating:
          type: number
          format: float
          minimum: 0
          maximum: 5
          description: Average rating
        numReviews:
          type: integer
          minimum: 0
          description: Number of reviews
        inStock:
          type: boolean
          default: true
          description: Stock availability
        tags:
          type: array
          items:
            type: string
        reviews:
          type: array
          items:
            $ref: '#/components/schemas/Review'
      required:
        - title
        - author
        - publishedDate
        - numberOfPages
        - description
        - price
        - publisher

    Review:
      type: object
      properties:
        user:
          type: string
          description: User ID who wrote the review
        rating:
          type: integer
          minimum: 1
          maximum: 5
          description: Rating value
        comment:
          type: string
          description: Review comment
        createdAt:
          type: string
          format: date-time
      required:
        - user
        - rating
        - comment

    Error:
      type: object
      properties:
        message:
          type: string
          description: Error message
        stack:
          type: string
          description: Error stack trace (only in development)

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  username:
                    type: string
                  email:
                    type: string
                  token:
                    type: string
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      description: Authenticate user and get token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
              required:
                - email
                - password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  username:
                    type: string
                  email:
                    type: string
                  token:
                    type: string
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: Retrieve all books with optional filtering and pagination
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of items per page
        - in: query
          name: genre
          schema:
            type: string
          description: Filter by genre
        - in: query
          name: sort
          schema:
            type: string
          description: Sort field and order (e.g., rating,desc)
      responses:
        '200':
          description: List of books
          content:
            application/json:
              schema:
                type: object
                properties:
                  books:
                    type: array
                    items:
                      $ref: '#/components/schemas/Book'
                  page:
                    type: integer
                  totalPages:
                    type: integer
                  totalBooks:
                    type: integer

    post:
      tags:
        - Books
      summary: Create a new book
      description: Add a new book to the database
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '201':
          description: Book created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /books/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
        description: Book ID
    
    get:
      tags:
        - Books
      summary: Get book by ID
      description: Retrieve a specific book by its ID
      responses:
        '200':
          description: Book found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - Books
      summary: Update book
      description: Update a specific book's details
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: Book updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Books
      summary: Delete book
      description: Remove a specific book
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Book deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /books/{id}/reviews:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
        description: Book ID
    
    post:
      tags:
        - Reviews
      summary: Add book review
      description: Add a review to a specific book
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
      responses:
        '201':
          description: Review added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /books/search:
    get:
      tags:
        - Books
      summary: Search books
      description: Search books by query string
      parameters:
        - in: query
          name: q
          required: true
          schema:
            type: string
          description: Search query
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Book'
                  total:
                    type: integer 